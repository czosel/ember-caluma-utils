# source: http://localhost:8000/graphql
# timestamp: Tue Feb 12 2019 09:39:36 GMT+0100 (CET)

input AddFormQuestionInput {
  form: ID!
  question: ID!
  clientMutationId: String
}

"""
Add question at the end of form.
"""
type AddFormQuestionPayload {
  form: Form
  clientMutationId: String
}

input AddWorkflowFlowInput {
  workflow: ID!
  tasks: [ID]!
  next: FlowJexl!
  clientMutationId: String
}

type AddWorkflowFlowPayload {
  workflow: Workflow
  clientMutationId: String
}

interface Answer {
  id: ID
  createdAt: DateTime!
  createdByUser: String
  createdByGroup: String
  modifiedAt: DateTime!
  question: Question!
  meta: JSONString!
}

type AnswerConnection {
  pageInfo: PageInfo!
  edges: [AnswerEdge]!
}

type AnswerEdge {
  """
  The item at the end of the edge
  """
  node: Answer

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum AnswerOrdering {
  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

input CancelCaseInput {
  id: ID!
  clientMutationId: String
}

type CancelCasePayload {
  case: Case
  clientMutationId: String
}

type Case implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  workflow: Workflow!
  status: CaseStatus!
  meta: JSONString!
  document: Document
  workItems(
    before: String
    after: String
    first: Int
    last: Int

    """
    WorkItemStatusArgument
    """
    status: WorkItemStatusArgument
    task: ID
    case: ID

    """
    WorkItemOrdering
    """
    orderBy: [WorkItemOrdering]
  ): WorkItemConnection
  parentWorkItem: WorkItem
}

type CaseConnection {
  pageInfo: PageInfo!
  edges: [CaseEdge]!
}

type CaseEdge {
  """
  The item at the end of the edge
  """
  node: Case

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum CaseOrdering {
  """
  Status
  """
  STATUS_ASC

  """
  Status (descending)
  """
  STATUS_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
An enumeration.
"""
enum CaseStatus {
  """
  Case is running and work items need to be completed.
  """
  RUNNING

  """
  Case is done.
  """
  COMPLETED

  """
  Case is cancelled.
  """
  CANCELED
}

"""
An enumeration.
"""
enum CaseStatusArgument {
  """
  Case is running and work items need to be completed.
  """
  RUNNING

  """
  Case is done.
  """
  COMPLETED

  """
  Case is cancelled.
  """
  CANCELED
}

type ChoiceQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    search: String

    """
    OptionOrdering
    """
    orderBy: [OptionOrdering]
  ): OptionConnection

  """
  The ID of the object.
  """
  id: ID!
}

type CompleteTaskFormTask implements Task & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  type: TaskType!
  meta: JSONString!
  addressGroups: GroupJexl
  isArchived: Boolean!
  form: Form!

  """
  The ID of the object.
  """
  id: ID!
}

type CompleteWorkflowFormTask implements Task & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  type: TaskType!
  meta: JSONString!
  addressGroups: GroupJexl
  isArchived: Boolean!

  """
  The ID of the object.
  """
  id: ID!
}

input CompleteWorkItemInput {
  id: ID!
  clientMutationId: String
}

type CompleteWorkItemPayload {
  workItem: WorkItem
  clientMutationId: String
}

input CopyFormInput {
  slug: String!
  name: String!
  description: String
  source: ID!
  clientMutationId: String
}

type CopyFormPayload {
  form: Form
  clientMutationId: String
}

input CopyOptionInput {
  slug: String!
  label: String!
  source: ID!
  clientMutationId: String
}

type CopyOptionPayload {
  option: Option
  clientMutationId: String
}

input CopyQuestionInput {
  slug: String!
  label: String!
  source: ID!
  clientMutationId: String
}

type CopyQuestionPayload {
  question: Question
  clientMutationId: String
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type Document implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  form: Form!
  meta: JSONString!
  answers(
    before: String
    after: String
    first: Int
    last: Int
    question: ID
    search: String

    """
    AnswerOrdering
    """
    orderBy: [AnswerOrdering]
  ): AnswerConnection
  case: Case
  workItem: WorkItem
}

type DocumentConnection {
  pageInfo: PageInfo!
  edges: [DocumentEdge]!
}

type DocumentEdge {
  """
  The item at the end of the edge
  """
  node: Document

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum DocumentOrdering {
  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

type FloatAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: Float!
  meta: JSONString!
}

type FloatQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  minValue: Float
  maxValue: Float
}

type Flow implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  next: FlowJexl!
  tasks: [Task]!
}

type FlowConnection {
  pageInfo: PageInfo!
  edges: [FlowEdge]!
}

type FlowEdge {
  """
  The item at the end of the edge
  """
  node: Flow

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Flow jexl represents a jexl expression returning task slugs.

Following transforms can be used:
* task - return single task
* tasks - return multiple tasks

Examples:
* 'task-slug'|task
* ['task-slug1', 'task-slug2']|tasks
"""
scalar FlowJexl

type Form implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  meta: JSONString!
  isPublished: Boolean!
  isArchived: Boolean!
  questions(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    label: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
    excludeForms: [ID]
    search: String

    """
    QuestionOrdering
    """
    orderBy: [QuestionOrdering]
  ): QuestionConnection

  """
  Reference this form has been copied from
  """
  source: Form

  """
  The ID of the object.
  """
  id: ID!
}

type FormConnection {
  pageInfo: PageInfo!
  edges: [FormEdge]!
}

type FormEdge {
  """
  The item at the end of the edge
  """
  node: Form

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum FormOrdering {
  """
  Name
  """
  NAME_ASC

  """
  Name (descending)
  """
  NAME_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
Group jexl represents a jexl expression returning group names.

Following transforms can be used:
* groups - return list of group names

Examples:
* ['group-name1', 'group-name2']|groups
"""
scalar GroupJexl

type IntegerAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: Int!
  meta: JSONString!
}

type IntegerQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxValue: Int
  minValue: Int
}

"""
JSON String
"""
scalar JSONString

type ListAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: [String]!
  meta: JSONString!
}

type MultipleChoiceQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection
  options(
    before: String
    after: String
    first: Int
    last: Int

    """
    OptionOrdering
    """
    orderBy: [OptionOrdering]
    slug: String
    label: String
    search: String
  ): OptionConnection

  """
  The ID of the object.
  """
  id: ID!
}

type Mutation {
  saveWorkflow(input: SaveWorkflowInput!): SaveWorkflowPayload
  addWorkflowFlow(input: AddWorkflowFlowInput!): AddWorkflowFlowPayload
  removeFlow(input: RemoveFlowInput!): RemoveFlowPayload
  saveSimpleTask(input: SaveSimpleTaskInput!): SaveSimpleTaskPayload
  saveCompleteWorkflowFormTask(
    input: SaveCompleteWorkflowFormTaskInput!
  ): SaveCompleteWorkflowFormTaskPayload
  saveCompleteTaskFormTask(
    input: SaveCompleteTaskFormTaskInput!
  ): SaveCompleteTaskFormTaskPayload
  startCase(input: StartCaseInput!): StartCasePayload
  cancelCase(input: CancelCaseInput!): CancelCasePayload
  completeWorkItem(input: CompleteWorkItemInput!): CompleteWorkItemPayload
  setWorkItemAssignedUsers(
    input: SetWorkItemAssignedUsersInput!
  ): SetWorkItemAssignedUsersPayload
  saveForm(input: SaveFormInput!): SaveFormPayload
  copyForm(input: CopyFormInput!): CopyFormPayload
  addFormQuestion(input: AddFormQuestionInput!): AddFormQuestionPayload
  removeFormQuestion(input: RemoveFormQuestionInput!): RemoveFormQuestionPayload
  reorderFormQuestions(
    input: ReorderFormQuestionsInput!
  ): ReorderFormQuestionsPayload
  saveOption(input: SaveOptionInput!): SaveOptionPayload
  removeOption(input: RemoveOptionInput!): RemoveOptionPayload
  copyOption(input: CopyOptionInput!): CopyOptionPayload
  copyQuestion(input: CopyQuestionInput!): CopyQuestionPayload
  saveTextQuestion(input: SaveTextQuestionInput!): SaveTextQuestionPayload
  saveTextareaQuestion(
    input: SaveTextareaQuestionInput!
  ): SaveTextareaQuestionPayload
  saveChoiceQuestion(input: SaveChoiceQuestionInput!): SaveChoiceQuestionPayload
  saveMultipleChoiceQuestion(
    input: SaveMultipleChoiceQuestionInput!
  ): SaveMultipleChoiceQuestionPayload
  saveFloatQuestion(input: SaveFloatQuestionInput!): SaveFloatQuestionPayload
  saveIntegerQuestion(
    input: SaveIntegerQuestionInput!
  ): SaveIntegerQuestionPayload
  saveTableQuestion(input: SaveTableQuestionInput!): SaveTableQuestionPayload
  saveDocument(input: SaveDocumentInput!): SaveDocumentPayload
  saveDocumentStringAnswer(
    input: SaveDocumentStringAnswerInput!
  ): SaveDocumentStringAnswerPayload
  saveDocumentIntegerAnswer(
    input: SaveDocumentIntegerAnswerInput!
  ): SaveDocumentIntegerAnswerPayload
  saveDocumentFloatAnswer(
    input: SaveDocumentFloatAnswerInput!
  ): SaveDocumentFloatAnswerPayload
  saveDocumentListAnswer(
    input: SaveDocumentListAnswerInput!
  ): SaveDocumentListAnswerPayload
  saveDocumentTableAnswer(
    input: SaveDocumentTableAnswerInput!
  ): SaveDocumentTableAnswerPayload
}

"""
An object with an ID
"""
interface Node {
  """
  The ID of the object.
  """
  id: ID!
}

type Option implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  meta: JSONString!

  """
  Reference this option has been copied from
  """
  source: Option

  """
  The ID of the object.
  """
  id: ID!
}

type OptionConnection {
  pageInfo: PageInfo!
  edges: [OptionEdge]!
}

type OptionEdge {
  """
  The item at the end of the edge
  """
  node: Option

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum OptionOrdering {
  """
  Label
  """
  LABEL_ASC

  """
  Label (descending)
  """
  LABEL_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  allWorkflows(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String

    """
    WorkflowOrdering
    """
    orderBy: [WorkflowOrdering]
  ): WorkflowConnection
  allTasks(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String

    """
    TaskTypeArgument
    """
    type: TaskTypeArgument
    isArchived: Boolean
    search: String

    """
    TaskOrdering
    """
    orderBy: [TaskOrdering]
  ): TaskConnection
  allCases(
    before: String
    after: String
    first: Int
    last: Int
    workflow: ID

    """
    CaseStatusArgument
    """
    status: CaseStatusArgument

    """
    CaseOrdering
    """
    orderBy: [CaseOrdering]
  ): CaseConnection
  allWorkItems(
    before: String
    after: String
    first: Int
    last: Int

    """
    WorkItemStatusArgument
    """
    status: WorkItemStatusArgument

    """
    WorkItemOrdering
    """
    orderBy: [WorkItemOrdering]
    task: ID
    case: ID
  ): WorkItemConnection
  allForms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection
  allQuestions(
    before: String
    after: String
    first: Int
    last: Int

    """
    QuestionOrdering
    """
    orderBy: [QuestionOrdering]
    slug: String
    label: String
    isRequired: String
    isHidden: String
    isArchived: Boolean
    excludeForms: [ID]
    search: String
  ): QuestionConnection
  allDocuments(
    before: String
    after: String
    first: Int
    last: Int
    form: ID
    search: String
    id: ID

    """
    DocumentOrdering
    """
    orderBy: [DocumentOrdering]
  ): DocumentConnection

  """
  The ID of the object
  """
  node(id: ID!): Node
}

interface Question {
  id: ID!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  forms(
    before: String
    after: String
    first: Int
    last: Int
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
  ): FormConnection
  source: Question
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
}

type QuestionEdge {
  """
  The item at the end of the edge
  """
  node: Question

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Question jexl expression returning boolean.

Following transform can be used:
* answer - access answer of document by question slug
* mapby - map list by key. Helpful to work with table answers
  whereas an answer is a list of dicts.

Examples:
* 'answer' == 'question-slug'|answer
* 'answer' in 'list-question-slug'|answer
* 'answer' in 'table-question-slug'|answer|mapby('column-question')
"""
scalar QuestionJexl

"""
An enumeration.
"""
enum QuestionOrdering {
  """
  Label
  """
  LABEL_ASC

  """
  Label (descending)
  """
  LABEL_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

input RemoveFlowInput {
  flow: ID!
  clientMutationId: String
}

type RemoveFlowPayload {
  flow: Flow
  clientMutationId: String
}

input RemoveFormQuestionInput {
  form: ID!
  question: ID!
  clientMutationId: String
}

type RemoveFormQuestionPayload {
  form: Form
  clientMutationId: String
}

input RemoveOptionInput {
  option: ID!
  clientMutationId: String
}

type RemoveOptionPayload {
  clientMutationId: String
}

input ReorderFormQuestionsInput {
  form: ID!
  questions: [ID]!
  clientMutationId: String
}

type ReorderFormQuestionsPayload {
  form: Form
  clientMutationId: String
}

input SaveChoiceQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  options: [ID]!
  clientMutationId: String
}

type SaveChoiceQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveCompleteTaskFormTaskInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Group jexl returning what group(s) derived work items will be addressed to.
  """
  addressGroups: GroupJexl
  isArchived: Boolean
  form: ID!
  clientMutationId: String
}

type SaveCompleteTaskFormTaskPayload {
  task: Task
  clientMutationId: String
}

input SaveCompleteWorkflowFormTaskInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Group jexl returning what group(s) derived work items will be addressed to.
  """
  addressGroups: GroupJexl
  isArchived: Boolean
  clientMutationId: String
}

type SaveCompleteWorkflowFormTaskPayload {
  task: Task
  clientMutationId: String
}

input SaveDocumentFloatAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: Float!
  clientMutationId: String
}

type SaveDocumentFloatAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentInput {
  form: ID!
  meta: JSONString
  clientMutationId: String
}

input SaveDocumentIntegerAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: Int!
  clientMutationId: String
}

type SaveDocumentIntegerAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentListAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: [String]!
  clientMutationId: String
}

type SaveDocumentListAnswerPayload {
  answer: Answer
  clientMutationId: String
}

type SaveDocumentPayload {
  document: Document
  clientMutationId: String
}

input SaveDocumentStringAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString
  value: String!
  clientMutationId: String
}

type SaveDocumentStringAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveDocumentTableAnswerInput {
  question: ID!
  document: ID!
  meta: JSONString

  """
  List of document IDs representing the rows in the table.
  """
  value: [ID]!
  clientMutationId: String
}

type SaveDocumentTableAnswerPayload {
  answer: Answer
  clientMutationId: String
}

input SaveFloatQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  minValue: Float
  maxValue: Float
  clientMutationId: String
}

type SaveFloatQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveFormInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString
  isArchived: Boolean
  isPublished: Boolean
  clientMutationId: String
}

type SaveFormPayload {
  form: Form
  clientMutationId: String
}

input SaveIntegerQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  minValue: Int
  maxValue: Int
  clientMutationId: String
}

type SaveIntegerQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveMultipleChoiceQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  options: [ID]!
  clientMutationId: String
}

type SaveMultipleChoiceQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveOptionInput {
  slug: String!
  label: String!
  meta: JSONString
  clientMutationId: String
}

type SaveOptionPayload {
  option: Option
  clientMutationId: String
}

input SaveSimpleTaskInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Group jexl returning what group(s) derived work items will be addressed to.
  """
  addressGroups: GroupJexl
  isArchived: Boolean
  clientMutationId: String
}

type SaveSimpleTaskPayload {
  task: Task
  clientMutationId: String
}

input SaveTableQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean

  """
  One row of table is represented by this form
  """
  rowForm: ID!
  clientMutationId: String
}

type SaveTableQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveTextareaQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  maxLength: Int
  clientMutationId: String
}

type SaveTextareaQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveTextQuestionInput {
  slug: String!
  label: String!
  isRequired: QuestionJexl
  isHidden: QuestionJexl
  meta: JSONString
  isArchived: Boolean
  maxLength: Int
  clientMutationId: String
}

type SaveTextQuestionPayload {
  question: Question
  clientMutationId: String
}

input SaveWorkflowInput {
  slug: String!
  name: String!
  description: String
  meta: JSONString

  """
  Starting task(s) of the workflow.
  """
  startTasks: [ID]!

  """
  Allow workflow to be started with any form
  """
  allowAllForms: Boolean

  """
  List of forms which are allowed to start workflow with
  """
  allowForms: [ID]
  isArchived: Boolean
  isPublished: Boolean
  clientMutationId: String
}

type SaveWorkflowPayload {
  workflow: Workflow
  clientMutationId: String
}

input SetWorkItemAssignedUsersInput {
  workItem: ID!
  assignedUsers: [String]!
  clientMutationId: String
}

type SetWorkItemAssignedUsersPayload {
  workItem: WorkItem
  clientMutationId: String
}

type SimpleTask implements Task & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  type: TaskType!
  meta: JSONString!
  addressGroups: GroupJexl
  isArchived: Boolean!

  """
  The ID of the object.
  """
  id: ID!
}

input StartCaseInput {
  workflow: ID!
  meta: JSONString
  parentWorkItem: ID
  form: ID
  clientMutationId: String
}

type StartCasePayload {
  case: Case
  clientMutationId: String
}

type StringAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: String!
  meta: JSONString!
}

type TableAnswer implements Answer & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  question: Question!
  value: [Document]!
  meta: JSONString!
  document: Document!
}

type TableQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  One row of table is represented by this form
  """
  rowForm: Form

  """
  The ID of the object.
  """
  id: ID!
}

interface Task {
  id: ID!
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  isArchived: Boolean!
  addressGroups: GroupJexl
  meta: JSONString!
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
}

type TaskEdge {
  """
  The item at the end of the edge
  """
  node: Task

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum TaskOrdering {
  """
  Name
  """
  NAME_ASC

  """
  Name (descending)
  """
  NAME_DESC

  """
  Description
  """
  DESCRIPTION_ASC

  """
  Description (descending)
  """
  DESCRIPTION_DESC

  """
  Type
  """
  TYPE_ASC

  """
  Type (descending)
  """
  TYPE_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
An enumeration.
"""
enum TaskType {
  """
  Task which can only be marked as completed.
  """
  SIMPLE

  """
  Task completing defined workflow form.
  """
  COMPLETE_WORKFLOW_FORM

  """
  Task completing defined task form.
  """
  COMPLETE_TASK_FORM
}

"""
An enumeration.
"""
enum TaskTypeArgument {
  """
  Task which can only be marked as completed.
  """
  SIMPLE

  """
  Task completing defined workflow form.
  """
  COMPLETE_WORKFLOW_FORM

  """
  Task completing defined task form.
  """
  COMPLETE_TASK_FORM
}

type TextareaQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxLength: Int
}

type TextQuestion implements Question & Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  label: String!
  isRequired: QuestionJexl!
  isHidden: QuestionJexl!
  isArchived: Boolean!
  meta: JSONString!
  source: Question
  forms(
    before: String
    after: String
    first: Int
    last: Int

    """
    FormOrdering
    """
    orderBy: [FormOrdering]
    slug: String
    name: String
    description: String
    isPublished: Boolean
    isArchived: Boolean
    search: String
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  maxLength: Int
}

type Workflow implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String
  slug: String!
  name: String!
  description: String
  meta: JSONString!
  isPublished: Boolean!
  isArchived: Boolean!
  startTasks: [Task]!

  """
  Allow workflow to be started with any form
  """
  allowAllForms: Boolean!
  allowForms(
    before: String
    after: String
    first: Int
    last: Int
  ): FormConnection

  """
  The ID of the object.
  """
  id: ID!
  flows(
    before: String
    after: String
    first: Int
    last: Int
    task: ID
  ): FlowConnection
}

type WorkflowConnection {
  pageInfo: PageInfo!
  edges: [WorkflowEdge]!
}

type WorkflowEdge {
  """
  The item at the end of the edge
  """
  node: Workflow

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum WorkflowOrdering {
  """
  Name
  """
  NAME_ASC

  """
  Name (descending)
  """
  NAME_DESC

  """
  Description
  """
  DESCRIPTION_ASC

  """
  Description (descending)
  """
  DESCRIPTION_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

type WorkItem implements Node {
  createdAt: DateTime!
  modifiedAt: DateTime!
  createdByUser: String
  createdByGroup: String

  """
  The ID of the object.
  """
  id: ID!
  task: Task!
  status: WorkItemStatus!
  meta: JSONString!

  """
  Offer work item to be processed by a group of users, such are not committed to process it though.
  """
  addressedGroups: [String]!

  """
  Users responsible to undertake given work item.
  """
  assignedUsers: [String]!
  case: Case!

  """
  Defines case of a sub-workflow
  """
  childCase: Case
  document: Document
}

type WorkItemConnection {
  pageInfo: PageInfo!
  edges: [WorkItemEdge]!
}

type WorkItemEdge {
  """
  The item at the end of the edge
  """
  node: WorkItem

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
An enumeration.
"""
enum WorkItemOrdering {
  """
  Status
  """
  STATUS_ASC

  """
  Status (descending)
  """
  STATUS_DESC

  """
  Created at
  """
  CREATED_AT_ASC

  """
  Created at (descending)
  """
  CREATED_AT_DESC

  """
  Modified at
  """
  MODIFIED_AT_ASC

  """
  Modified at (descending)
  """
  MODIFIED_AT_DESC

  """
  Created by user
  """
  CREATED_BY_USER_ASC

  """
  Created by user (descending)
  """
  CREATED_BY_USER_DESC

  """
  Created by group
  """
  CREATED_BY_GROUP_ASC

  """
  Created by group (descending)
  """
  CREATED_BY_GROUP_DESC
}

"""
An enumeration.
"""
enum WorkItemStatus {
  """
  Task is ready to be processed.
  """
  READY

  """
  Task is done.
  """
  COMPLETED

  """
  Task is cancelled.
  """
  CANCELED
}

"""
An enumeration.
"""
enum WorkItemStatusArgument {
  """
  Task is ready to be processed.
  """
  READY

  """
  Task is done.
  """
  COMPLETED

  """
  Task is cancelled.
  """
  CANCELED
}
